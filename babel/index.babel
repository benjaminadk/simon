//work in progress got visuals but logic is tricky
//check function and move1
function helpToggle(){
  if($("#help").css("visibility")==="visible") {
    $("#help").css("visibility","hidden");
  }
  else{
    $("#help").css("visibility","visible");
  }
}

var lit;
var x;
var y;
var i;
var on;
var off;
var j = 0;
var round = 1;
var randomSeq = [];
var litID = [];
var clicked = [];


//CREATE SOUNDS FROM AUDIO API
//HELP FROM PIZZICATO JS
//NOTES: G3 C4 E4 G4 HOLD YOUR NOTES!
var greenSound = new Pizzicato.Sound({ 
    source: 'wave',
    options: {
        type: 'sine',
        frequency: 196,
        release: .75,
        attack: .5
    }});
var redSound = new Pizzicato.Sound({ 
    source: 'wave',
    options: {
        type: 'sine',
        frequency: 261.63,
        release: .75,
        attack: .5
    }});
var yellowSound = new Pizzicato.Sound({ 
    source: 'wave',
    options: {
        type: 'sine',
        frequency: 329.63,
        release: .75,
        attack: .5
    }});
var blueSound = new Pizzicato.Sound({ 
    source: 'wave',
    options: {
        type: 'sine',
        frequency: 392.00,
        release: .75,
        attack: .5
    }});



class App extends React.Component {
  constructor(props) {
    super(props);
    this.state={
      gameOn: false,
      winner: false,
      pushed: false,
      start: false,
      strict: false
    }
    this.handleMouseDown = this.handleMouseDown.bind(this);
    this.handleMouseUp = this.handleMouseUp.bind(this);
    this.handleClick = this.handleClick.bind(this);
    this.handleStrictMode = this.handleStrictMode.bind(this);
    this.handleStartApp = this.handleStartApp.bind(this);
    this.handleGame = this.handleGame.bind(this);
    this.handleCheck = this.handleCheck.bind(this);
  }
    handleGame () {
    var red = $("#red"),
    yellow = $("#yellow"),
    green = $("#green"),
    blue = $("#blue");
    if(round >= 13){
      off = 200;
      on = 400;
    }
    else if(round >= 9){
      off = 300;
      on = 600;
    }
    else if(round >= 5){
      off = 400;
      on = 800;
    }
    else{
      off = 500;
      on = 1000;
    }
    
    x = setInterval(function(){
      if (randomSeq[j] == 1) {

                    lit = 'colorGreenPush';
                    green.addClass(lit);
                    greenSound.play();
                    litID.push(1);

                      setTimeout(function () {
                      green.removeClass(lit);
                      greenSound.stop();
                    }, off);
                }
      
      else if (randomSeq[j] == 2) {

                    lit = 'colorRedPush';
                    red.addClass(lit);
                    redSound.play();
                    litID.push(2);

                        setTimeout(function () {
                        red.removeClass(lit);
                        redSound.stop();
                    }, off);
                }
      else if (randomSeq[j] == 3) {

                    lit = 'colorYellowPush';
                    yellow.addClass(lit);
                    yellowSound.play();
                    litID.push(3);

                        setTimeout(function () {
                        yellow.removeClass(lit);
                        yellowSound.stop();
                    }, off);
                }
      else if (randomSeq[j] == 4) {

                    lit = 'colorBluePush';
                    blue.addClass(lit);
                    blueSound.play();
                    litID.push(4);

                        setTimeout(function () {
                        blue.removeClass(lit);
                        blueSound.stop();
                    }, off);
                }
      j++;
      if(j>=round){
        clearInterval(x);
      }

    },on);
  }
  handleCheck () {
    var display = $("#display");
    if(litID.length == clicked.length){
      if(litID.join() == clicked.join()){
        if(round == 20){
          setTimeout(function(){
          alert("Unreal. You Acually Won!!!");
          location.reload();
          },1000);
        }
        else{
          setTimeout(function(){
            display.text("-"+(round + 1)+"-");
            round ++;
            console.log(this);
            litID = [];
            clicked = [];
            j = 0;
            this.App.prototype.handleGame();
          },1000);
        }
      }
      else{
        if(this.state.strict){
          display.text("LOSE");
          setTimeout(function(){
          location.reload();
          },2000);
        }
        else{
          setTimeout(function(){
            display.text("!!!!");
            litID = [];
            clicked = [];
            j = 0;
            this.App.prototype.handleGame();
          },1000);
        }
      }
    }
  }
  handleMouseDown (e) {
    if(e.target.id==="green"){
    $("#green").addClass("colorGreenPush");
      greenSound.play();
      clicked.push(1);
      this.handleCheck();
    }
    else if(e.target.id==="red"){
      $("#red").addClass("colorRedPush");
      redSound.play();
      clicked.push(2);
      this.handleCheck();
    }
    else if(e.target.id==="yellow"){
      $("#yellow").addClass("colorYellowPush");
      yellowSound.play();
      clicked.push(3);
      this.handleCheck();
    }
    else if(e.target.id==="blue"){
      $("#blue").addClass("colorBluePush");
      blueSound.play();
      clicked.push(4);
      this.handleCheck();
    }
    }
  handleMouseUp (e) {
    if(e.target.id==="green"){
    $("#green").removeClass("colorGreenPush");
      greenSound.stop();
    }
    else if(e.target.id==="red"){
    $("#red").removeClass("colorRedPush");
      redSound.stop();
    }
    else if(e.target.id==="yellow"){
    $("#yellow").removeClass("colorYellowPush"); 
      yellowSound.stop();
    }
    else if(e.target.id==="blue"){
    $("#blue").removeClass("colorBluePush"); 
      blueSound.stop();
    }
  }
  handleClick () {
    this.setState({
      gameOn: !this.state.gameOn,
      strict: false,
      start: false
    });  
    for (i=0; i<20; i++) {
        randomSeq[i] = Math.ceil((Math.random() * 4));
        }
  }
  handleStrictMode () {
    this.setState({
      strict: !this.state.strict
    });
  }
  handleStartApp () {
    this.setState({
      start: true
    });
    $("#display").text("-"+round+"-");
        this.handleGame();
  }
  render() {
    const colorClasses =
   ["colorGreen pad untouchable", "colorRed pad untouchable", "colorYellow pad untouchable", "colorBlue pad untouchable"];
    
    if(this.state.gameOn){
      $("input[type='checkbox']").prop("checked",true);
      $("#strict").removeClass("untouchable");
      $("#start").removeClass("untouchable");
      $(".pad").removeClass("untouchable");
      $("#display").css({"color":"rgba(162, 0, 0,.5)",
                         "text-shadow":"0px 0px 50px red"});
    }
    else{
      $("input[type='checkbox']").prop("checked",false);
      $(".pad,#strict,#start").addClass("untouchable");
      $("#display").css({"color":"#000000",
                         "text-shadow":"none"});
      
    }
    
    if(this.state.strict){
      $("#strict").css("background-color","orangered");
    }
    else {
      $("#strict").css("background-color","#727272");
    }
    
    if(this.state.start) {
      $("#start").css("background-color","orangered");
    }
    else{
      $("#start").css("background-color","#727272");
    }
     return (
      <div className="gameBase">
        <TopRow onMouseDown={this.handleMouseDown}
                onMouseUp={this.handleMouseUp}
                greenClass={colorClasses[0]}
                redClass={colorClasses[1]}/>
         <GameMiddle onClick={this.handleClick}
                     strictMode={this.handleStrictMode}
                     startApp={this.handleStartApp}/>
          
        <BottomRow onMouseDown={this.handleMouseDown}
                   onMouseUp={this.handleMouseUp}
                   yellowClass={colorClasses[2]}
                   blueClass={colorClasses[3]}
          />
    </div>
    );
  }
}

const TopRow = (props) => {
  return (
    <div className="row">
    <div id="green" className={props.greenClass} onMouseDown={props.onMouseDown} onMouseUp={props.onMouseUp}></div>
    <div id="red" className={props.redClass} onMouseDown={props.onMouseDown} onMouseUp={props.onMouseUp}></div>
      </div>
  );
}

const BottomRow = (props) => {
  return (
      <div className="row">
      <div id="yellow" className={props.yellowClass} onMouseDown={props.onMouseDown} onMouseUp={props.onMouseUp}></div>
      <div id="blue" className={props.blueClass} onMouseDown={props.onMouseDown} onMouseUp={props.onMouseUp}></div>
      </div>
  );
}
const GameMiddle = (props) => {
  return (
  <div className="gameMiddle">
    <p className="gameName">SIMON</p>
      <span id="display">-0-</span>
      <span id="start" className="untouchable" onClick={props.startApp}></span>
      <span id="strict" className="untouchable" onClick={props.strictMode}></span>
      <span id="off">OFF</span>
      <div className="switch tiny">
  <input className="switch-input" id="onOff" type="checkbox" name="onOff"/>
  <label className="switch-paddle" for="onOff" onClick={props.onClick}>
  </label>
</div>
      <span id="on">ON</span>
      
      </div>
  );
}



ReactDOM.render(<App />,document.getElementById("app"));

